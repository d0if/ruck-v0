[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://dibpqpopk87g5"]

[ext_resource type="Texture2D" uid="uid://dukmnoagf5jrw" path="res://Materials/grass_1.png" id="1_co8rf"]

[sub_resource type="Shader" id="Shader_m0d4l"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx, alpha_to_coverage;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_disable;
uniform float grow : hint_range(-16.0, 16.0, 0.001);

uniform float distance_fade_min : hint_range(0.0, 4096.0, 0.01);
uniform float distance_fade_max : hint_range(0.0, 4096.0, 0.01);
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float alpha_antialiasing_edge : hint_range(0.0, 1.0, 0.01);
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_disable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_disable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec4 backlight : source_color;
uniform sampler2D texture_backlight : hint_default_black, filter_linear_mipmap, repeat_disable;

uniform sampler2D texture_heightmap : hint_default_black, filter_linear_mipmap, repeat_disable;
uniform float heightmap_scale : hint_range(-16.0, 16.0, 0.001);
uniform int heightmap_min_layers : hint_range(1, 64);
uniform int heightmap_max_layers : hint_range(1, 64);
uniform vec2 heightmap_flip;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;

	// Billboard Mode: Enabled
	//MODELVIEW_MATRIX = VIEW_MATRIX * mat4(
			//MAIN_CAM_INV_VIEW_MATRIX[0],
			//MAIN_CAM_INV_VIEW_MATRIX[1],
			//MAIN_CAM_INV_VIEW_MATRIX[2],
			//MODEL_MATRIX[3]);
	//MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
	
	//Custom billboard
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 cam_to_obj = normalize(MODEL_MATRIX[3].xyz - CAMERA_POSITION_WORLD.xyz);
	vec3 z_axis = normalize(cross(up, cross(cam_to_obj, up))); //points towards cam, on ground
	vec3 x_axis = normalize(cross(up, z_axis)); //normal to cam, on ground
	//vec3 z_axis = MAIN_CAM_INV_VIEW_MATRIX[0].xyz;
	//vec3 x_axis = MAIN_CAM_INV_VIEW_MATRIX[2].xyz;
	//
	vec3 y_axis = up;
	vec3 pitch_axis = normalize(cross(cam_to_obj, x_axis)); //normal to cam, in air. not necessarily straight up
	vec3 test_axis = normalize(y_axis + pitch_axis);

	mat4 billboard_mat = mat4(
	    vec4(x_axis, 0.0),
	    vec4(test_axis, 0.0),
		vec4(z_axis, 0.0),
	    MODEL_MATRIX[3]);

	MODELVIEW_MATRIX = VIEW_MATRIX * billboard_mat;
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);

	// Grow: Enabled
	VERTEX += NORMAL * grow;
}

void fragment() {
	vec2 base_uv = UV;

	{
		// Height: Enabled
		vec3 view_dir = normalize(normalize(-VERTEX + EYE_OFFSET) * mat3(TANGENT * heightmap_flip.x, -BINORMAL * heightmap_flip.y, NORMAL));
		float depth = 1.0 - texture(texture_heightmap, base_uv).r;
		vec2 ofs = base_uv - view_dir.xy * depth * heightmap_scale * 0.01;
		base_uv = ofs;
	}

	vec4 albedo_tex = texture(texture_albedo, base_uv);

	// Vertex Color Use as Albedo: Enabled
	albedo_tex *= COLOR;

	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
	ALPHA_ANTIALIASING_EDGE = alpha_antialiasing_edge;
	ALPHA_TEXTURE_COORDINATE = UV * vec2(albedo_texture_size);

	// Distance Fade: Pixel Alpha
	ALPHA *= clamp(smoothstep(distance_fade_min, distance_fade_max, length(VERTEX)), 0.0, 1.0);

	// Backlight: Enabled
	vec3 backlight_tex = texture(texture_backlight, base_uv).rgb;
	BACKLIGHT = (backlight.rgb + backlight_tex);
}
"

[sub_resource type="Gradient" id="Gradient_de70a"]

[sub_resource type="GradientTexture2D" id="GradientTexture2D_f8hb0"]
gradient = SubResource("Gradient_de70a")
fill_from = Vector2(1, 1)

[resource]
render_priority = 0
shader = SubResource("Shader_m0d4l")
shader_parameter/albedo = Color(0.517432, 0.61125, 0.332172, 1)
shader_parameter/texture_albedo = ExtResource("1_co8rf")
shader_parameter/grow = 0.0
shader_parameter/distance_fade_min = 40.0
shader_parameter/distance_fade_max = 0.0
shader_parameter/alpha_scissor_threshold = 0.0
shader_parameter/alpha_antialiasing_edge = 0.35
shader_parameter/albedo_texture_size = Vector2i(512, 512)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/backlight = Color(0.513284, 0.505605, 0.378863, 1)
shader_parameter/texture_backlight = SubResource("GradientTexture2D_f8hb0")
shader_parameter/heightmap_scale = 3.653
shader_parameter/heightmap_min_layers = 8
shader_parameter/heightmap_max_layers = 32
shader_parameter/heightmap_flip = Vector2(1, 1)
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
